cmake_minimum_required(VERSION 3.16.0)
project(YUView LANGUAGES CXX)

### Require out-of-source builds
file(TO_CMAKE_PATH "${PROJECT_BINARY_DIR}/CMakeLists.txt" LOC_PATH)
if(EXISTS "${LOC_PATH}")
    message(FATAL_ERROR "You cannot build in a source directory (or any directory with a CMakeLists.txt file). Please make a build subdirectory.")
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# try to find Qt6 first
find_package(Qt6 COMPONENTS Gui Widgets OpenGL Xml Concurrent Network Test)
if (Qt6_FOUND)
    message(STATUS "Building YUView using Qt6")
endif()
if (NOT Qt6_FOUND)
    # fallback: try to find Qt5
    find_package(Qt5 COMPONENTS Gui Widgets OpenGL Xml Concurrent Network Test REQUIRED)
    if (Qt5_FOUND)
        message(STATUS "Building YUView using Qt5")
    endif()
endif()

if(MSVC)
    # Make build use multiple threads under MSVC:
    add_compile_options(/MP)
    
    # Make build use Unicode:
    add_compile_definitions(UNICODE _UNICODE)
endif()

#####################################################################################################################################
# YUViewApp
#####################################################################################################################################
# get source and include files fo the app
file( GLOB_RECURSE APP_SRC_FILES "YUViewApp/src/*.cpp" )
file( GLOB_RECURSE APP_INC_FILES "YUViewApp/src/*.h" )

if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    # Mac OS X specific code
    # see https://doc-snapshots.qt.io/qt6-dev/appicon.html
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE YUView.icns)

    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/YUViewApp/images/YUView.icns")
    set_source_files_properties(${app_icon_macos} PROPERTIES
           MACOSX_PACKAGE_LOCATION "Resources")

    add_executable( YUView  MACOSX_BUNDLE ${APP_SRC_FILES}  ${APP_INC_FILES}  ${app_icon_macos})
    target_link_libraries( YUView
        YUViewLib
        Qt::Gui
        Qt::Widgets
        Qt::OpenGL
        Qt::Xml
        Qt::Concurrent
        Qt::Network
    )
    target_include_directories(YUView PUBLIC
        "YUViewApp/src"
    )

    install(TARGETS YUView
        BUNDLE DESTINATION ${CMAKE_INSTALL_PREFIX}/bin )
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    add_executable( YUView  ${APP_SRC_FILES}  ${APP_INC_FILES}  )
    target_link_libraries( YUView
        YUViewLib
        Qt::Gui
        Qt::Widgets
        Qt::OpenGL
        Qt::Xml
        Qt::Concurrent
        Qt::Network
    )
    target_include_directories(YUView PUBLIC
        "YUViewApp/src"
    )

    install(TARGETS YUView)

    # Install desktop entry
    install(FILES packaging/linux/de.rwth_aachen.ient.YUView.desktop
            DESTINATION share/applications )
    # Install mime file
    install(FILES packaging/linux/de.rwth_aachen.ient.YUView.xml
            DESTINATION share/mime/packages )
    # Install metainfo
    install(FILES packaging/linux/de.rwth_aachen.ient.YUView.appdata.xml
            DESTINATION share/metainfo )
    # Install icons
    install(FILES packaging/linux/icons/32x32/de.rwth_aachen.ient.YUView.png
            DESTINATION share/icons/hicolor/32x32/apps)
    install(FILES packaging/linux/icons/64x64/de.rwth_aachen.ient.YUView.png
            DESTINATION share/icons/hicolor/64x64/apps)
    install(FILES packaging/linux/icons/128x128/de.rwth_aachen.ient.YUView.png
            DESTINATION share/icons/hicolor/128x128/apps)
    install(FILES packaging/linux/icons/256x256/de.rwth_aachen.ient.YUView.png
            DESTINATION share/icons/hicolor/256x256/apps)
    install(FILES packaging/linux/icons/512x512/de.rwth_aachen.ient.YUView.png
            DESTINATION share/icons/hicolor/512x512/apps)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    add_executable( YUView  ${APP_SRC_FILES}  ${APP_INC_FILES}  )
    target_link_libraries( YUView
        YUViewLib
        Qt::Gui
        Qt::Widgets
        Qt::OpenGL
        Qt::Xml
        Qt::Concurrent
        Qt::Network
    )
    target_include_directories(YUView PUBLIC
        "YUViewApp/src"
    )

    install(TARGETS YUView)
endif()

#####################################################################################################################################
# YUViewLib
#####################################################################################################################################

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOUIC_SEARCH_PATHS "YUViewLib/ui")

# get source files
file( GLOB_RECURSE LIB_SRC_FILES "YUViewLib/src/*.cpp" )

# get include files
file( GLOB_RECURSE LIB_INC_FILES "YUViewLib/src/*.h" )

# get forms, ui files
file( GLOB LIB_FORMS_FILES "YUViewLib/ui/*.ui" )

# Resources
file (GLOB LIB_RSC_FILES
    "YUViewLib/images/images.qrc"
    "YUViewLib/docs/docs.qrc"
)

add_library( YUViewLib STATIC ${LIB_SRC_FILES}  ${LIB_INC_FILES} ${LIB_FORMS_FILES}  ${LIB_RSC_FILES} )
target_link_libraries( YUViewLib PRIVATE
    Qt::Gui
    Qt::Widgets
    Qt::OpenGL
    Qt::Xml
    Qt::Concurrent
    Qt::Network
)
target_include_directories(YUViewLib PUBLIC "YUViewLib/src")




#####################################################################################################################################
# YUViewUnitTest
#####################################################################################################################################
enable_testing(true) # needs to be before add_subdirectory (or in the root CMake file?)

set(CMAKE_AUTOMOC ON)

# get all test files
file( GLOB_RECURSE TST_FILES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "YUViewUnitTest/*.cpp" )

# add a target for each test file
FOREACH(test_file_name ${TST_FILES})
    get_filename_component(test_base_name ${test_file_name} NAME_WE )

    message( VERBOSE "Adding executable for ${test_base_name}")

    list(APPEND TEST_LIST ${test_base_name})
    add_executable( ${test_base_name}  ${test_file_name})
    add_test(NAME ${test_base_name} COMMAND ${test_base_name})
    target_link_libraries( ${test_base_name}
        YUViewLib
        Qt::Test
    )
    # target_include_directories(${test_base_name}  PUBLIC "YUViewLib/src") # are those not pulled by the lib dependency?

ENDFOREACH()
